"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
# Note: python-dotenv is useful for local development,
# but environment variables set in Azure App Service
# Configuration will override .env file values in production.
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Remove the duplicate definition of BASE_DIR if it exists later in the file
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from environment variable for production security
SECRET_KEY = os.environ.get('SECRET_KEY', 'a-default-secret-key-for-development-or-tests')

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to False for production
DEBUG = False

# ALLOWED_HOSTS are required when DEBUG is False
# Add your Azure Web App hostname(s) here
ALLOWED_HOSTS = ['hdocr.azurewebsites.net']
# If you need to allow requests from localhost during testing/development, you can add it conditionally
# if DEBUG:
#     ALLOWED_HOSTS = ['*'] # Allow all hosts in debug mode for simplicity
# else:
#     ALLOWED_HOSTS = ['hdocr.azurewebsites.net'] # Production hosts


# Environment variables for Azure services
AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT = os.getenv("AZURE_DOCUMENT_INTELLIGENCE_ENDPOINT")
AZURE_DOCUMENT_INTELLIGENCE_KEY = os.getenv("AZURE_DOCUMENT_INTELLIGENCE_KEY")
AZURE_API_VERSION = os.getenv("AZURE_API_VERSION")
AZURE_MODEL = os.getenv("AZURE_MODEL")

AZURE_ACCOUNT_NAME = os.getenv("AZURE_ACCOUNT_NAME")
AZURE_ACCOUNT_KEY = os.getenv("AZURE_ACCOUNT_KEY")
AZURE_CONTAINER_NAME = os.getenv("AZURE_CONTAINER_NAME")

# Construct connection string - ensure these variables are set in Azure App Service
AZURE_CONNECTION_STRING = (
    f"DefaultEndpointsProtocol=https;AccountName={AZURE_ACCOUNT_NAME};"
    f"AccountKey={AZURE_ACCOUNT_KEY};EndpointSuffix=core.windows.net"
)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'notes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Ensure CorsMiddleware is placed high up, preferably before CommonMiddleware
]

ROOT_URLCONF = 'backend.urls'

# CORS Configuration
# WARNING: CORS_ALLOW_ALL_ORIGINS = True is permissive.
# In production, you should restrict this to your frontend's domain(s).
# Example (if you were restricting):
# CORS_ALLOWED_ORIGINS = [
#     "https://your-frontend-name.azurestaticapps.net",
# ]
CORS_ALLOW_ALL_ORIGINS = True


REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
}


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Using SQLite in production is generally NOT recommended for anything other than basic testing.
# You should typically use a managed database service like Azure Database for PostgreSQL or MySQL.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3', # SQLite will be stored in the persistent /home directory on Azure
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/' # Keep this as a relative URL

# Add this line for collecting static files in production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'